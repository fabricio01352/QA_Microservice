version: '3.8'

services:
  db:
    image: mysql:5.7
    container_name: mysql-container
    restart: unless-stopped
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      # - MYSQL_USER=${MYSQL_USER}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - '3306:3306'
    volumes:
      - ./mysql:/docker-entrypoint-initdb.d
      - mysql-data:/var/lib/mysql #checa aqui qepex
    networks:
      - pg-network

  dbpostgre:
    image: postgres:latest
    container_name: postgres-container
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - pg-network


#usar FIREWALLD un servicio de firewall dinamico debian
  firewall:
    image: debian:latest
    container_name: firewall-container
    privileged: true #se ocupa permisos para manipular reglas de red
    command: tail -f /dev/null #mismo truko para mantener el contenedor corriendo sin hacernada
    networks:
      - pg-network #OJO CON la red
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro #se ocupan acceso a cgroups para manejar el servicio de FIREWALLD SE OCUPA INTERACTUAR CON EL SISTEMA DE FIREWALL DENTRO DEL CONTAENEDOR
    environment:
      - TZ=UTC


  nginx:
    image: nginx:latest
    container_name: nginx-container
    ports:
      - "8081:81"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
   #depends_on:
    # networks:
    #   - app-network



  debian-cli:
    image: debian:latest
    container_name: debian-cli
    command: tail -f /dev/null # mantenemos el contenedor en ejecucion sin hacer nada, haremos 'algo' con docker exec despues, tail muestra las ultimas lineas
    # de un rchivo, -f de follow, mantiene el comando esperando, util para logs la ruta /dev/bull es un archio especial que descarta todo
    # OSEA ES UN TRUCO PARA MANTENER EL CONTENEDOR VIVO SI NAHCER NADA, ESTA SIGUIENDO UN RACHIVO QUE NUNCA CAMBIA, DOCKER NO LO TIENE PORQUE NO ESTA INACTIVO
    networks:
      - pg-network #el contenedor va estar aislado donde este lar ed de las bd, las bd estan en una red privada, aunque puede ser un problema si cada microservicio tiene su bd




# esto se va a declarar una sola vez, son volumenes y networks globales, aplicadas a cada contenedor que las quiera user
volumes:
  mysql-data:
  pg-data:

#simulando que tuvieramos una red privada, creo que bridge es privada. Solo para postgre
networks:
  pg-network:
    driver: bridge
